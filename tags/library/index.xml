<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on lhw_itguy</title>
    <link>http://localhost:1313/tags/library/</link>
    <description>Recent content in Library on lhw_itguy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 22 Aug 2017 00:54:43 +0900</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/library/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cpgo Lib</title>
      <link>http://localhost:1313/post/cpgo-lib/</link>
      <pubDate>Tue, 22 Aug 2017 00:54:43 +0900</pubDate>
      
      <guid>http://localhost:1313/post/cpgo-lib/</guid>
      <description>저번에 올렸던 포스트golang-with-cybosplus 에서 사이보스플러스와 Go 언어를 연동하는 법을 살폈다. 이를 사용하여 Wrapper 라이브러를 작성하여 Github에 https://github.com/ippoeyeslhw/cpgo 프로젝트를 올렸다.
파이썬과 비교 파이썬에서 구현하는 방법을 참고하여 유사하게 만들려고 노력했다.
객체생성 객체를 생성할때는 CpClass 객체를 만든뒤 Create를 호출한다.
stkmst := &amp;amp;cpgo.CpClass{} stkmst.Create(&amp;quot;CpDib.StockMst&amp;quot;) defer stkmst.Release()  이에 대응되는 파이썬 코드는
stkmst = win32com.client.Dispatch(&amp;quot;dscbo1.StockMst&amp;quot;)  파이썬과는 다르게 COM을 다루고 있다는 느낌을 줄이려고 했다.
이벤트 이벤트를 처리하기위해 이벤트 핸들러는 Receiver 인터페이스를 구현하도록 하였다.
type Receiver interface { Received(*CpClass) } 이 인터페이스를 구현하는 구조체를 아래와 같이 생성한다.</description>
    </item>
    
  </channel>
</rss>