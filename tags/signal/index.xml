<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>signal on lhw_itguy</title>
    <link>https://ippoeyeslhw.github.io/tags/signal/</link>
    <description>Recent content in signal on lhw_itguy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>&amp;copy; Copyright 2019 LHW ITGUY</copyright>
    <lastBuildDate>Tue, 16 Apr 2019 01:16:18 +0900</lastBuildDate>
    
	<atom:link href="https://ippoeyeslhw.github.io/tags/signal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go-signal</title>
      <link>https://ippoeyeslhw.github.io/posts/go-signal/</link>
      <pubDate>Tue, 16 Apr 2019 01:16:18 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/posts/go-signal/</guid>
      <description>고언어에서 os signal 을 콘트롤 하는 방법을 찾아보았다.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/signal&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;time&amp;quot; ) func main() { // signal 채널을 만든다. signal_chan := make(chan os.Signal, 2) signal.Notify(signal_chan, syscall.SIGINT) // ctrl+c // loop isDone := false for isDone != true { // signal handler select { case sig := &amp;lt;-signal_chan: fmt.Println(&amp;quot;signal!! &amp;quot;, sig) isDone = true default: isDone = false } time.Sleep(1) } }  채널을 통해서 signal을 전달하게 된다.</description>
    </item>
    
  </channel>
</rss>