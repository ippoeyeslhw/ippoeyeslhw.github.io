<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lhw_itguy</title>
    <link>https://ippoeyeslhw.github.io/</link>
    <description>Recent content on lhw_itguy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
<<<<<<< HEAD
    <lastBuildDate>Fri, 08 Sep 2017 22:39:07 +0900</lastBuildDate>
=======
    <lastBuildDate>Tue, 16 Apr 2019 01:16:18 +0900</lastBuildDate>
>>>>>>> gh-pages
    
	<atom:link href="https://ippoeyeslhw.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<<<<<<< HEAD
      <title>Gcloud_git_error</title>
      <link>https://ippoeyeslhw.github.io/post/gcloud_git_error/</link>
      <pubDate>Fri, 08 Sep 2017 22:39:07 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/post/gcloud_git_error/</guid>
      <description>구글 앱 엔진을 사용하기 위해 google cloud platform documents 를 읽고 잘 처리하면 된다.
이때 미리 저장된 저장소에서 프로젝트를 가져올때 google cloud 소스저장소 간혹 git 관련 문제가 있다.
Repositories 에 가서 복제 버튼을 눌러 가이드대로 수행시에
gcloud source repos clone python-gae-quickstart --project=projectname  요놈을 실행할때 auth 실패 로 인해 git exit status 128 에러가 뜰때가 있다. 이 경우 C:\Program Files\Git\mingw64\etc\gitconfig 파일을 열고
[credential] helper = gcloud.cmd old = manager  이 부분을 추가해주면 된다.</description>
    </item>
    
    <item>
      <title>Py Datetime Stamp</title>
      <link>https://ippoeyeslhw.github.io/post/py-datetime-stamp/</link>
      <pubDate>Mon, 28 Aug 2017 21:15:49 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/post/py-datetime-stamp/</guid>
      <description>파이썬에서 Datetime 을 이용하여 unix timestamp 를 구하고 싶을 경우가 있다. 1970-1-1 을 기준으로 차이값(time delta)를 구한뒤에 총 초를 구하고 밀리세컨 단위로 바꿔주면 된다.
import datetime def unix_timestamp(y,m,d,h): dt = datetime.datetime(y,m,d,h) epoch = datetime.datetime(1970,1,1) return int((dt-epoch).total_seconds() * 1000) stmp = unix_timestamp(2017,8,28,13) print (stmp)  혹은 timestamp 메서드를 이용하되 utc timezone 지정을 해주고 출력을 해본다.
import datetime def unix_timestamp(y,m,d,h): dt = datetime.datetime(y,m,d,h) return int(dt.replace(tzinfo=datetime.timezone.utc).timestamp() * 1000)  이렇게 구하면 날짜 지정하기가 쉬워진다.</description>
    </item>
    
    <item>
      <title>Decorator Elapsed Time</title>
      <link>https://ippoeyeslhw.github.io/post/decorator-elapsed-time/</link>
      <pubDate>Thu, 24 Aug 2017 20:57:17 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/post/decorator-elapsed-time/</guid>
      <description>파이썬의 데코레이터를 이용하여 Elapsed time 을 측정하는 간단한 예제는 데코레이터를 설명하는데 자주 쓰인다.
def print_elapsed(func): def wrapper(*args, **kwargs): start = time.time() print (&#39;--- start time check (%s)-----&#39;%(func.__name__)) func(*args, **kwargs) elased = time.time() - start print(&#39;--- end time check Elapsed: %s&#39;%(elased)) print(&#39; &#39;) return wrapper  인자를 넘겨주는 부분이 약간 헷갈릴수 있는데 데코레이터 자체는 함수를 인자로 받아 함수를 리턴해주는 것이고
실제 그 함수를 사용할때는 리턴받은 함수에 인자를 넘겨주는 셈이 된다고 이해하면 된다.</description>
    </item>
    
    <item>
      <title>Gaussian Random</title>
      <link>https://ippoeyeslhw.github.io/post/gaussian-random/</link>
      <pubDate>Tue, 22 Aug 2017 22:08:50 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/post/gaussian-random/</guid>
      <description>var normal_dist_canvas = document.getElementById(&#39;normal_dist_canvas&#39;); var normal_dist_ctx = normal_dist_canvas.getContext(&#39;2d&#39;); function box_muller_generator(){ var x1 = Math.random(); var x2 = Math.random(); var u1 = Math.sqrt(-2 * Math.log(x1)) * Math.cos( Math.PI * x2); var u2 = Math.sqrt(-2 * Math.log(x1)) * Math.sin( Math.PI * x2); return u1; } function normal_dist_draw_line(x1,y1, x2,y2){ normal_dist_ctx.beginPath(); normal_dist_ctx.moveTo(x1,y1); normal_dist_ctx.lineTo(x2, y2); normal_dist_ctx.strokeStyle = &#39;#000000&#39;; normal_dist_ctx.stroke(); normal_dist_ctx.closePath(); } function normal_dist_draw_txt(txt, x, y){ normal_dist_ctx.textBaseline = &#39;top&#39;; normal_dist_ctx.textAlign = &#39;center&#39;; normal_dist_ctx.fillText(txt, x, y); } // initialize var normal_dist_slice = new Array(60); for(var i=0; i = from &amp;&amp; rnd 위 예제는 가우시안 랜덤을 보여준다.</description>
    </item>
    
    <item>
      <title>Go Http Request</title>
      <link>https://ippoeyeslhw.github.io/post/go-http-request/</link>
      <pubDate>Tue, 22 Aug 2017 20:32:12 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/post/go-http-request/</guid>
      <description>고언어에서 HTTP request하는 법을 포스팅한다.
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; ) func main() { // data uri := &amp;amp;url.Values{} uri.Add(&amp;quot;bar&amp;quot;, &amp;quot;foo&amp;quot;) // request req, err := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;http://www.naver.com&amp;quot;, bytes.NewBufferString(uri.Encode())) if err != nil { panic(err) } // set header req.Header.Add(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36&amp;quot;) // request client := &amp;amp;http.Client{} resp, err := client.Do(req) if err != nil { panic(err) } // read response data, err := ioutil.</description>
    </item>
    
    <item>
      <title>Py3 Http Request</title>
      <link>https://ippoeyeslhw.github.io/post/py3-http-request/</link>
      <pubDate>Tue, 22 Aug 2017 19:43:41 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/post/py3-http-request/</guid>
      <description>파이썬3 에서 써드파티 라이브러리 없이 Http Request 하는 법을 포스팅한다.
GET 요청 기본 import urllib.request url = &#39;http://www.naver.com&#39; f = urllib.request.urlopen(url) print (f.read().decode(&#39;utf-8&#39;))  가장 간단하게 urlopen 메소드를 사용하는 방법이다. f는 class &amp;lsquo;http.client.HTTPResponse&amp;rsquo; 이며 f.read() 메소드는 bytes 오브젝트를 반환하며 이를 디코딩해서 str로 사용한다.
GET 요청 + HEADER import urllib.request url = &#39;http://www.naver.com&#39; REQ_HEADERS = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36&#39;, } req = urllib.</description>
    </item>
    
    <item>
      <title>Go Signal</title>
      <link>https://ippoeyeslhw.github.io/post/go-signal/</link>
      <pubDate>Tue, 22 Aug 2017 01:01:33 +0900</pubDate>
=======
      <title>go-http-request</title>
      <link>https://ippoeyeslhw.github.io/posts/go-http-request/</link>
      <pubDate>Tue, 16 Apr 2019 01:16:18 +0900</pubDate>
>>>>>>> gh-pages
      
      <guid>https://ippoeyeslhw.github.io/posts/go-http-request/</guid>
      <description>고언어에서 HTTP request하는 법을 포스팅한다.
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; ) func main() { // data uri := &amp;amp;url.Values{} uri.Add(&amp;quot;bar&amp;quot;, &amp;quot;foo&amp;quot;) // request req, err := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;http://www.naver.com&amp;quot;, bytes.NewBufferString(uri.Encode())) if err != nil { panic(err) } // set header req.Header.Add(&amp;quot;User-Agent&amp;quot;, &amp;quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36&amp;quot;) // request client := &amp;amp;http.Client{} resp, err := client.Do(req) if err != nil { panic(err) } // read response data, err := ioutil.</description>
    </item>
    
    <item>
      <title>go-signal</title>
      <link>https://ippoeyeslhw.github.io/posts/go-signal/</link>
      <pubDate>Tue, 16 Apr 2019 01:16:18 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/posts/go-signal/</guid>
      <description>고언어에서 os signal 을 콘트롤 하는 방법을 찾아보았다.
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/signal&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;time&amp;quot; ) func main() { // signal 채널을 만든다. signal_chan := make(chan os.Signal, 2) signal.Notify(signal_chan, syscall.SIGINT) // ctrl+c // loop isDone := false for isDone != true { // signal handler select { case sig := &amp;lt;-signal_chan: fmt.Println(&amp;quot;signal!! &amp;quot;, sig) isDone = true default: isDone = false } time.Sleep(1) } }  채널을 통해서 signal을 전달하게 된다.</description>
    </item>
    
    <item>
      <title>hello-hugo</title>
      <link>https://ippoeyeslhw.github.io/posts/hello-hugo/</link>
      <pubDate>Tue, 16 Apr 2019 01:16:18 +0900</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/posts/hello-hugo/</guid>
      <description>정적블로그를 하고 싶다는 생각이 들었다. 최근 Go언어를 하다보니 자연스럽게 Hugo를 알게 되었고 정적 사이트를 생성하는데 편리하고 속도가 빠른것을 알게되었다. 그래서 이제 블로그를 정적블로그로 만들기로 했다.
설치 설치는 Hugo installing을 참조하면 된다. 바이나리를 받아서 적당한 폴더에다가 넣어놓은뒤에 환경변수에 등록해주면 된다.
나같은 경우는 윈도우 환경이므로 윈도우 바이너리를 받은후 폴더도 생성하였다.
C:\hugo\bin\hugo.exe C:\hugo\sites\  실행파일은 bin 폴더에다가 넣고 sites 라는 폴더에다가는 정적웹페이지를 생성하도록 하려고 구성하였다.
블로그구성하기 Hugo의 quickstart 문서를 보게되면 만들고자하는 사이트를 만드는 명령어가 나온다.</description>
    </item>
    
    <item>
      <title>Knowhow list</title>
      <link>https://ippoeyeslhw.github.io/knowhow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ippoeyeslhw.github.io/knowhow/</guid>
      <description> {python3} 에서 {http request} 를 {날리고} 싶을때  py3-http-request  {golang} 에서 {http request} 를 {날리고} 싶을때  go-http-request  {PyCharm} 에서 {코드 작성시 임의변수(앞으로 특정객체가 대입이 될)} 를 {자동완성하고} 싶을때  type hint 를 준다. type-hinting-in-pycharm  {golang} 에서 {Ctrl+c 를 누르면 종료가 되는 것} 를 {만들고} 싶을때  go-signal  {git} 에서 {간단한 사용법} 를 {찾고} 싶을때  git-간편안내서  {python3} 에서 {데코레이터 함수에 파라미터를 넘기는 것} 를 {헷갈릴} 싶을때  Decorator Elapsed-time  {python3} 에서 {datime을 사용하여 unix-timestamp} 를 {구하고} 싶을때  Py Datetime Stamp   </description>
    </item>
    
  </channel>
</rss>